using System;
using System.IO;
using System.Text.RegularExpressions;

namespace TsdLib.Configuration
{
    public class RemiControlTest : IRemiControl
    {
        private const string AppVersionFilter = @"\d+\.\d+";
        private readonly string _settingsBasePath;

        public RemiControlTest(string settingsBasePath)
        {
            _settingsBasePath = settingsBasePath;
        }

        public void WriteConfigStringToRemi(string data, string applicationName, string applicationVersion, string fileName)
        {
            Match match = Regex.Match(applicationVersion, AppVersionFilter);
            string appVersion = match.Success ? match.Value : applicationVersion;
            string directoryName = Path.Combine(_settingsBasePath, applicationName, appVersion);
            if (!Directory.Exists(directoryName))
                Directory.CreateDirectory(directoryName);

            File.WriteAllText(Path.Combine(directoryName, fileName), data);
        }

        public string ReadConfigStringFromRemi(string applicationName, string applicationVersion, string fileName)
        {
            Match match = Regex.Match(applicationVersion, AppVersionFilter);
            string appVersion = match.Success ? match.Value : applicationVersion;
            string filePath = Path.Combine(_settingsBasePath, applicationName, appVersion, fileName);

            if (!File.Exists(filePath))
                throw new ConfigDoesNotExistInRemiException(applicationName, applicationVersion, fileName);

            string data = File.ReadAllText(filePath);

            return data;
        }
    }

    /// <summary>
    /// Will be replaced with the exception generated by RemiControl
    /// </summary>
    [Serializable]
    class ConfigDoesNotExistInRemiException : Exception
    {
        public string ApplicationName { get; private set; }
        public string ApplicationVersion { get; private set; }
        public string ConfigType { get; private set; }

        public override string Message
        {
            get { return ConfigType + " does not exist for " + ApplicationName + " v." + ApplicationVersion + "."; }
        }

        public ConfigDoesNotExistInRemiException(string applicationName, string applicationVersion, string configType)
        {
            ApplicationName = applicationName;
            ApplicationVersion = applicationVersion;
            ConfigType = configType;
        }
    }
}