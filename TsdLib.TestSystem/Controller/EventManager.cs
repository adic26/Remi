using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using TsdLib.Measurements;
using TsdLib.TestSystem.TestSequence;
using TsdLib.UI;

namespace TsdLib.TestSystem.Controller
{
    /// <summary>
    /// Processes data generated by the test sequence and passes it to the view as required.
    /// </summary>
    public class EventManager : MarshalByRefObject
    {
        /// <summary>
        /// Gets a reference to the View object, representing the user interface.
        /// </summary>
        protected IView ViewProxy { get; private  set; }

        protected ITestSequence TestSequence { get; private set; }

        private readonly TaskScheduler uiTaskScheduler;

        /// <summary>
        /// Initialize a new ControllerProxy.
        /// </summary>
        /// <param name="view">An instance of <see cref="IView"/> that will be used to handle UI events.</param>
        public EventManager(IView view, ITestSequence testSequence)
        {
            ViewProxy = view;
            TestSequence = testSequence;
            uiTaskScheduler = TaskScheduler.FromCurrentSynchronizationContext();
        }

        public async virtual void AddData(object sender, DataContainer data)
        {
            try
            {
                await Task.Factory.StartNew(() =>
                    ViewProxy.AddArbitraryData(data),
                    CancellationToken.None,
                    TaskCreationOptions.None,
                    uiTaskScheduler);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update data on the UI{0}Data type: {1}{0}Error: {2}", Environment.NewLine, data.GetType().Name, ex));
            }
        }

        /// <summary>
        /// Provides the observer with new data.
        /// </summary>
        /// <param name="measurement">The measurement information.</param>
        public async virtual void AddMeasurement(object sender, IMeasurement measurement)
        {
            try
            {
                if (ViewProxy.MeasurementDisplayControl != null)
                    await Task.Factory.StartNew(() =>
                        ViewProxy.MeasurementDisplayControl.AddMeasurement(measurement),
                        CancellationToken.None,
                        TaskCreationOptions.None,
                        uiTaskScheduler);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update measurement on the UI{0}Test Info: {1}{0}Error: {2}", Environment.NewLine, measurement, ex));
            }
        }

        public async virtual void AddTestInfo(object sender, ITestInfo testInfo)
        {
            try
            {
                if (ViewProxy.TestInfoDisplayControl != null)
                    await Task.Factory.StartNew(() =>
                        ViewProxy.TestInfoDisplayControl.AddTestInfo(testInfo),
                        CancellationToken.None,
                        TaskCreationOptions.None,
                        uiTaskScheduler);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update test info on the UI{0}Test Info: {1}{0}Error: {2}", Environment.NewLine, testInfo, ex));
            }
        }

        public async virtual void UpdateProgress(object sender, Tuple<int, int> progress)
        {
            try
            {
                if (ViewProxy.ProgressControl != null)
                    await Task.Factory.StartNew(() =>
                        ViewProxy.ProgressControl.UpdateProgress(progress.Item1, progress.Item2),
                        CancellationToken.None,
                        TaskCreationOptions.None,
                        uiTaskScheduler);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update test info on the UI{0}Progress: {1}/{2}{0}Error: {3}", Environment.NewLine, progress.Item1, progress.Item2, ex));
            }
        }

        public override object InitializeLifetimeService()
        {
            return null;
        }
    }
}
