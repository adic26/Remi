using System;
using System.Diagnostics;
using System.Threading;
using TsdLib.Measurements;
using TsdLib.UI;

namespace TsdLib.TestSystem.Controller
{
    /// <summary>
    /// Processes data generated by the test sequence and passes it to the view as required.
    /// </summary>
    public class EventManager : MarshalByRefObject
    {
        /// <summary>
        /// Gets a reference to the View object, representing the user interface.
        /// </summary>
        private readonly IView _viewProxy;

        /// <summary>
        /// Gets a reference to the object used to cancel/abort the test sequence.
        /// </summary>
        private ICancellationManager _testSequenceCancellationManager;

        private readonly SynchronizationContext _uiContext;

        /// <summary>
        /// Initialize a new ControllerProxy.
        /// </summary>
        /// <param name="view">An instance of <see cref="IView"/> that will be used to handle UI events.</param>
        /// <param name="testSequenceCancellationManager">Reference to the test sequence cancellation manager.</param>
        public EventManager(IView view, ICancellationManager testSequenceCancellationManager)
        {
            _viewProxy = view;
            _testSequenceCancellationManager = testSequenceCancellationManager;
            _uiContext = SynchronizationContext.Current;
        }

        [Obsolete("Use events instead")]
        public virtual void OnNext(DataContainer data)
        {
            try
            {
                _uiContext.Post(s => _viewProxy.AddArbitraryData(data), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update data on the UI{0}Data type: {1}{0}Error: {2}", Environment.NewLine, data.GetType().Name, ex));
            }

        }

        public virtual void AddData(DataContainer data)
        {
            try
            {
                _uiContext.Post(s => _viewProxy.AddArbitraryData(data), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update data on the UI{0}Data type: {1}{0}Error: {2}", Environment.NewLine, data.GetType().Name, ex));
            }

        }

        public void HandleThreeTuple(object sender, DataContainer data)
        {
            _uiContext.Post(s => _viewProxy.AddArbitraryData(data), null);
        }

        /// <summary>
        /// Provides the observer with new data.
        /// </summary>
        /// <param name="measurement">The measurement information.</param>
        [Obsolete("Use events instead")]
        public virtual void OnNext(IMeasurement measurement)
        {
            try
            {
                if (_viewProxy.MeasurementDisplayControl != null)
                    _uiContext.Post(s => _viewProxy.MeasurementDisplayControl.AddMeasurement(measurement), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update measurement on the UI{0}Test Info: {1}{0}Error: {2}", Environment.NewLine, measurement, ex));
            }
        }

        /// <summary>
        /// Provides the observer with new data.
        /// </summary>
        /// <param name="measurement">The measurement information.</param>
        public virtual void AddMeasurement(object sender, IMeasurement measurement)
        {
            try
            {
                if (_viewProxy.MeasurementDisplayControl != null)
                    _uiContext.Post(s => _viewProxy.MeasurementDisplayControl.AddMeasurement(measurement), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update measurement on the UI{0}Test Info: {1}{0}Error: {2}", Environment.NewLine, measurement, ex));
            }
        }

        [Obsolete("Use events instead")]
        public virtual void OnNext(ITestInfo testInfo)
        {
            try
            {
                if (_viewProxy.TestInfoDisplayControl != null)
                    _uiContext.Post(s => _viewProxy.TestInfoDisplayControl.AddTestInfo(testInfo), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update test info on the UI{0}Test Info: {1}{0}Error: {2}", Environment.NewLine, testInfo, ex));
            }
        }

        public virtual void AddTestInfo(object sender, ITestInfo testInfo)
        {
            try
            {
                if (_viewProxy.TestInfoDisplayControl != null)
                    _uiContext.Post(s => _viewProxy.TestInfoDisplayControl.AddTestInfo(testInfo), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update test info on the UI{0}Test Info: {1}{0}Error: {2}", Environment.NewLine, testInfo, ex));
            }
        }

        [Obsolete("Use events instead")]
        public virtual void OnNext(Tuple<int, int> progress)
        {
            try
            {
                if (_viewProxy.ProgressControl != null)
                    _uiContext.Post(s => _viewProxy.ProgressControl.UpdateProgress(progress.Item1, progress.Item2), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update test info on the UI{0}Progress: {1}/{2}{0}Error: {3}", Environment.NewLine, progress.Item1, progress.Item2, ex));
            }
        }

        public virtual void UpdateProgress(object sender, Tuple<int, int> progress)
        {
            try
            {
                if (_viewProxy.ProgressControl != null)
                    _uiContext.Post(s => _viewProxy.ProgressControl.UpdateProgress(progress.Item1, progress.Item2), null);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(string.Format("Failed to update test info on the UI{0}Progress: {1}/{2}{0}Error: {3}", Environment.NewLine, progress.Item1, progress.Item2, ex));
            }
        }

        public override object InitializeLifetimeService()
        {
            return null;
        }
    }
}
