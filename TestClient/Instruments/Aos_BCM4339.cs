//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestClient.Instruments
{
    using System;
    using TsdLib.Instrument;
    using TsdLib.Instrument.Dummy;
    using TsdLib.Instrument.Adb;
    
    
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    [IdQuery("Avengers")]
    [InitCommands("netcfg wlan0 up")]
    [CommandDelay("200")]
    public class Aos_BCM4339 : InstrumentBase<AdbConnection>, IBlackBerryWlan
    {
        
        static AdbFactory _factory = new AdbFactory();
        
        internal Aos_BCM4339(AdbConnection connection) : 
                base(connection)
        {
        }
        
        internal Aos_BCM4339(DummyConnection connection) : 
                base(connection)
        {
        }
        
        protected override string ModelNumberMessage
        {
            get
            {
                return "cat /system/build.prop | grep ro.build.id";
            }
        }
        
        protected override string ModelNumberRegEx
        {
            get
            {
                return "(?<=ro.build.id=)\\w+";
            }
        }
        
        protected override string SerialNumberMessage
        {
            get
            {
                return "cat /system/build.prop | grep ro.build.date.utc";
            }
        }
        
        protected override string SerialNumberRegEx
        {
            get
            {
                return "(?<=ro.build.date.utc=)\\d+";
            }
        }
        
        protected override string FirmwareVersionMessage
        {
            get
            {
                return "cat /system/build.prop | grep ro.build.version.incremental";
            }
        }
        
        protected override string FirmwareVersionRegEx
        {
            get
            {
                return "(?<=ro.build.version.incremental=)\\w+";
            }
        }
        
        public static Aos_BCM4339 Connect()
        {
            return _factory.GetInstrument<Aos_BCM4339>();
        }
        
        public static Aos_BCM4339 Connect(string address)
        {
            return _factory.GetInstrument<Aos_BCM4339>(address);
        }
        
        public static Aos_BCM4339 Connect(ConnectionBase connection)
        {
            return _factory.GetInstrument<Aos_BCM4339>(((AdbConnection)(connection)));
        }
        
        public virtual void LoadFirmware(String firmwareImage)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("", -1, firmwareImage);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableWlan()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("netcfg wlan0 down", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableWlan()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("netcfg wlan0 up", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StartTx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_start 00:11:22:33:44:55 tx 100 1024 0", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StopTx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_stop tx", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StartRx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_start 00:00:00:C0:FF:EE rxwithack", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StopRx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_stop rx", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableDriver()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil up", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableDriver()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil down", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableMinimumPowerControl()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil mpc 0", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableWatchdog()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_watchdog 0", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetCountryCode(String countryCode)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil country {0}", -1, countryCode);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetBand(String band_try_auto)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil band {0}", -1, band_try_auto);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetRate(Int32 band, String rateType, Double rate, Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil {0}g_rate -{1} {2} -b {3}", -1, band, rateType, rate, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetChannel(Int32 channel, Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil chanspec {0}/{1}", -1, channel, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableForceCal()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_forcecal 1", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableScanSuppress()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil scansuppress 1", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableClosedLoopPowerControl()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_txpwrctrl 1", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetMimoTxBw(Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil mimo_txbw {0}", -1, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPowerDefault()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil txpwr1 -1", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPower(Double powerLevel)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil txpwr1 -d {0}", -1, powerLevel);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPowerOverrideLimits(Double powerLevel)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil txpwr1 -d {0} -o", -1, powerLevel);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void ResetCounter()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil reset_cnts", -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFamily()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil revinfo | grep chipnum", -1);
                return Connection.GetResponse<String>("(?<=chipnum 0x)\\d+");
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFirmwareType()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil ver", -1);
                return Connection.GetResponse<String>("(?<=version (\\d+\\.){3}\\d+ \\().*(?=\\))");
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFirmwareVersion()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil ver", -1);
                return Connection.GetResponse<String>("(?<=version )(\\d+\\.){3}\\d+");
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Boolean IsDriverEnabled()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil isup", -1);
                return Connection.GetResponse<Boolean>();
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetCountry()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil country", -1);
                return Connection.GetResponse<String>();
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Boolean GetActivecal()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_activecal", -1);
                return Connection.GetResponse<Boolean>();
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Int32 GetRxFrameCount()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil counters | grep rxdfrmmcast", -1);
                return Connection.GetResponse<Int32>("(?<=rxdfrmmcast )\\d+");
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
    }
}
