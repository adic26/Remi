//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestClient.Instruments
{
    using System;
    using System.Threading;
    using TsdLib.Instrument;
    using TsdLib.Instrument.Dummy;
    using TsdLib.Instrument.Adb;
    
    
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    [IdQuery("Avengers")]
    public class Aos_WiFi : InstrumentBase<AdbConnection>, IBlackBerryWlan
    {
        
        static AdbFactory _factory = new AdbFactory();
        
        internal Aos_WiFi(AdbConnection connection) : 
                base(connection)
        {
        }
        
        internal Aos_WiFi(DummyConnection connection) : 
                base(connection)
        {
        }
        
        public static Aos_WiFi Connect(CancellationToken token)
        {
            return _factory.GetInstrument<Aos_WiFi>(token);
        }
        
        public static Aos_WiFi Connect(CancellationToken token, string address)
        {
            return _factory.GetInstrument<Aos_WiFi>(token, address);
        }
        
        public static Aos_WiFi Connect(ConnectionBase connection)
        {
            return _factory.GetInstrument<Aos_WiFi>(((AdbConnection)(connection)));
        }
        
        [InitCommand()]
        public virtual void EnableRoot()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("adb root", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        [InitCommand()]
        public virtual void SetTcpPort()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("setprop service.adb.tcp.port 5555", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        [InitCommand()]
        public virtual void EnableTcpMode()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("adb tcpip 5555", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        protected override string GetModelNumber()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("getprop | grep ro.product.board", 0, false);
                return Connection.GetResponse<string>("(?<=: \\[)\\w+(?=\\])", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        protected override string GetSerialNumber()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("cat /nvram/boardid/bsn && echo \'\'", 0, false);
                return Connection.GetResponse<string>("\\d+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        protected override string GetFirmwareVersion()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("getprop | grep ro.build.version.incremental", 0, false);
                return Connection.GetResponse<string>("(?<=: \\[)\\w+(?=\\])", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableWlan()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("netcfg wlan0 down", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StartTx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_start 00:11:22:33:44:55 tx 100 1024 0", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StopTx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_stop tx", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StartRx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_start 00:00:00:C0:FF:EE rxwithack", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StopRx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil pkteng_stop rx", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableDriver()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil up", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableDriver()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil down", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableMinimumPowerControl()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil mpc 0", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableWatchdog()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_watchdog 0", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetCountryCode(String countryCode)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil country {0}", 0, false, countryCode);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetBand(String band_try_auto)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil band {0}", 0, false, band_try_auto);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetRate(Int32 band, String rateType, Double rate, Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil {0}g_rate -{1} {2} -b {3}", 0, false, band, rateType, rate, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetChannel(Int32 channel, Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil chanspec {0}/{1}", 0, false, channel, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableForceCal()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_forcecal 1", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableScanSuppress()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil scansuppress 1", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableClosedLoopPowerControl()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_txpwrctrl 1", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetMimoTxBw(Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil mimo_txbw {0}", 0, false, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPowerDefault()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil txpwr1 -1", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPower(Double powerLevel)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil txpwr1 -d {0}", 0, false, powerLevel);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPowerOverrideLimits(Double powerLevel)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil txpwr1 -d {0} -o", 0, false, powerLevel);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void ResetCounter()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil reset_cnts", 0, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTcpPort(Int32 port)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("setprop service.adb.tcp.port {0}", 0, false, port);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void ConnectViaWifi(String IpAddress)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("adb connect {0}", 0, false, IpAddress);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFamily()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("getprop | grep ro.hwf.wlan.chipset", 0, false);
                return Connection.GetResponse<String>("\\d+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFirmwareType()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil ver", 0, false);
                return Connection.GetResponse<String>("(?<=version (\\d+\\.){3}\\d+ \\().*(?=\\))", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFirmwareVersion()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil ver", 0, false);
                return Connection.GetResponse<String>("(?<=version )(\\d+\\.){3}\\d+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Boolean IsDriverEnabled()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil isup", 0, false);
                return Connection.GetResponse<Boolean>(".*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetCountry()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil country", 0, false);
                return Connection.GetResponse<String>(".*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Boolean GetActivecal()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil phy_activecal", 0, false);
                return Connection.GetResponse<Boolean>(".*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Int32 GetRxFrameCount()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/vendor/firmware/wlutil counters | grep rxdfrmmcast", 0, false);
                return Connection.GetResponse<Int32>("(?<=rxdfrmmcast )\\d+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetWlanIpAddress()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("ip -f inet addr show wlan0", 0, false);
                return Connection.GetResponse<String>("(?<=inet )\\d+\\.\\d+\\.\\d+\\.\\d+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
    }
}
