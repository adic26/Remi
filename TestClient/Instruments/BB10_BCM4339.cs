//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestClient.Instruments
{
    using System;
    using System.Threading;
    using TsdLib.Instrument;
    using TsdLib.Instrument.Dummy;
    using TsdLib.Instrument.Telnet;
    
    
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    [IdQuery("BlackBerry Device")]
    public class BB10_BCM4339 : InstrumentBase<TelnetConnection>, IBlackBerryWlan
    {
        
        static TelnetFactory _factory = new TelnetFactory();
        
        internal BB10_BCM4339(TelnetConnection connection) : 
                base(connection)
        {
        }
        
        internal BB10_BCM4339(DummyConnection connection) : 
                base(connection)
        {
        }
        
        public static BB10_BCM4339 Connect(CancellationToken token)
        {
            return _factory.GetInstrument<BB10_BCM4339>(token);
        }
        
        public static BB10_BCM4339 Connect(CancellationToken token, string address)
        {
            return _factory.GetInstrument<BB10_BCM4339>(token, address);
        }
        
        public static BB10_BCM4339 Connect(ConnectionBase connection)
        {
            return _factory.GetInstrument<BB10_BCM4339>(((TelnetConnection)(connection)));
        }
        
        [InitCommand()]
        public virtual void EnablePlt()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("echo fw_pltenable::1>>/pps/services/wifi/escreen", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        protected override string GetModelNumber()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("cat /pps/services/hw_info/inventory | grep Board_Type::", 200, false);
                return Connection.GetResponse<string>("(?<=Board_Type::).*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        protected override string GetSerialNumber()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("cat /pps/system/nvram/deviceinfo | grep BSN::", 200, false);
                return Connection.GetResponse<string>("(?<=BSN::).*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        protected override string GetFirmwareVersion()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("cat /pps/services/deviceproperties | grep scmbundle::", 200, false);
                return Connection.GetResponse<string>("(?<=scmbundle::).*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableWlan()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("ifconfig bcm0 down", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableWlan()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("ifconfig bcm0 up", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StartTx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl pkteng_start 00:11:22:33:44:55 tx 100 1024 0", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StopTx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl pkteng_stop tx", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StartRx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl pkteng_start 00:00:00:C0:FF:EE rxwithack", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void StopRx()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl pkteng_stop rx", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableDriver()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl up", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableDriver()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl down", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableMinimumPowerControl()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl mpc 0", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void DisableWatchdog()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl phy_watchdog 0", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetCountryCode(String countryCode)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl country {0}", 200, false, countryCode);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetBand(String band_try_auto)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl band {0}", 200, false, band_try_auto);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetRate(Int32 band, String rateType, Double rate, Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl {0}g_rate -{1} {2} -b {3}", 200, false, band, rateType, rate, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetChannel(Int32 channel, Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl chanspec {0}/{1}", 200, false, channel, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableForceCal()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl phy_forcecal 1", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void EnableScanSuppress()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl scansuppress 1", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetPowerControlMode(Int32 mode)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl phy_txpwrctrl {0}", 200, false, mode);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetMimoTxBw(Int32 bandwidth)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl mimio_txbw {0}", 200, false, bandwidth);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPowerDefault()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl txpwr1 -1", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPower(Double powerLevel)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl txpwr1 -d {0}", 200, false, powerLevel);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPowerOverrideLimits(Double powerLevel)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl txpwr1 -d {0} -o", 200, false, powerLevel);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void SetTxPowerIndex(Int32 powerIndex)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl phy_txpwrindex {0}", 200, false, powerIndex);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual void ResetCounter()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl reset_cnts", 200, false);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFamily()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("wl_bcm_dhd revinfo | grep chipnum", 200, false);
                return Connection.GetResponse<String>("(?<=chipnum 0x)\\d+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFirmwareType()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl ver", 200, false);
                return Connection.GetResponse<String>("(?<=version (\\d+\\.){3}\\d+ \\().*(?=\\))", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetChipsetFirmwareVersion()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl ver", 200, false);
                return Connection.GetResponse<String>("(?<=version )(\\d+\\.){3}\\w+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Boolean IsDriverEnabled()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl isup", 200, false);
                return Connection.GetResponse<Boolean>(".*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual String GetCountry()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl country", 200, false);
                return Connection.GetResponse<String>(".*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Boolean GetActivecal()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl phy_activecal", 200, false);
                return Connection.GetResponse<Boolean>(".*", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Int32 GetRxFrameCount()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("/var/wlan/wl counters | grep rxdfrmmcast", 200, false);
                return Connection.GetResponse<Int32>("(?<=rxdfrmmcast )\\d+", false, '\uD800');
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
    }
}
