//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestClient.Instruments
{
    using System;
    using TsdLib.Instrument;
    using TsdLib.Instrument.Dummy;
    
    
    // ReSharper disable once FieldCanBeMadeReadOnly.Local
    [IdQuery("MyInstrument, Model 12345")]
    public class PowerSupply : InstrumentBase<DummyConnection>
    {
        
        static DummyFactory _factory = new DummyFactory();
        
        internal PowerSupply(DummyConnection connection) : 
                base(connection)
        {
        }
        
        protected override string ModelNumberMessage
        {
            get
            {
                return "*IDN?";
            }
        }
        
        protected override string SerialNumberMessage
        {
            get
            {
                return "*IDN?";
            }
        }
        
        protected override string FirmwareVersionMessage
        {
            get
            {
                return "*IDN?";
            }
        }
        
        public static PowerSupply Connect()
        {
            return _factory.GetInstrument<PowerSupply>();
        }
        
        public static PowerSupply Connect(string address)
        {
            return _factory.GetInstrument<PowerSupply>(address);
        }
        
        public static PowerSupply Connect(ConnectionBase connection)
        {
            return _factory.GetInstrument<PowerSupply>(((DummyConnection)(connection)));
        }
        
        public virtual void SetVoltage(Double voltage)
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("SET:VOLT {0}", -1, voltage);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
        
        public virtual Double GetCurrent()
        {
            System.Threading.Monitor.Enter(Connection.SyncRoot);
            try
            {
                Connection.SendCommand("GET:CURRENT?", -1);
                return Connection.GetResponse<Double>(".*", '\uD800', -1);
            }
            finally
            {
                System.Threading.Monitor.Exit(Connection.SyncRoot);
            }
        }
    }
}
